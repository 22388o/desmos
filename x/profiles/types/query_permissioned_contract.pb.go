// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/profiles/v1beta1/query_permissioned_contract.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryIncomingDTagTransferRequestsRequest is the request type for the
// Query/IncomingDTagTransferRequests RPC endpoint
type QueryPermissionedContractRequest struct {
	// Receiver represents the address of the user to which query the incoming
	// requests for
	Admin           string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *QueryPermissionedContractRequest) Reset()         { *m = QueryPermissionedContractRequest{} }
func (m *QueryPermissionedContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPermissionedContractRequest) ProtoMessage()    {}
func (*QueryPermissionedContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_189224ae2d87840f, []int{0}
}
func (m *QueryPermissionedContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPermissionedContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPermissionedContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPermissionedContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPermissionedContractRequest.Merge(m, src)
}
func (m *QueryPermissionedContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPermissionedContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPermissionedContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPermissionedContractRequest proto.InternalMessageInfo

// QueryIncomingDTagTransferRequestsResponse is the response type for the
// Query/IncomingDTagTransferRequests RPC method.
type QueryPermissionedContractResponse struct {
	// Requests represent the list of all the DTag transfer requests made towards
	// the user
	Contract PermissionedContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract"`
}

func (m *QueryPermissionedContractResponse) Reset()         { *m = QueryPermissionedContractResponse{} }
func (m *QueryPermissionedContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPermissionedContractResponse) ProtoMessage()    {}
func (*QueryPermissionedContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_189224ae2d87840f, []int{1}
}
func (m *QueryPermissionedContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPermissionedContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPermissionedContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPermissionedContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPermissionedContractResponse.Merge(m, src)
}
func (m *QueryPermissionedContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPermissionedContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPermissionedContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPermissionedContractResponse proto.InternalMessageInfo

func (m *QueryPermissionedContractResponse) GetContract() PermissionedContract {
	if m != nil {
		return m.Contract
	}
	return PermissionedContract{}
}

func init() {
	proto.RegisterType((*QueryPermissionedContractRequest)(nil), "desmos.profiles.v1beta1.QueryPermissionedContractRequest")
	proto.RegisterType((*QueryPermissionedContractResponse)(nil), "desmos.profiles.v1beta1.QueryPermissionedContractResponse")
}

func init() {
	proto.RegisterFile("desmos/profiles/v1beta1/query_permissioned_contract.proto", fileDescriptor_189224ae2d87840f)
}

var fileDescriptor_189224ae2d87840f = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x3f, 0x4f, 0xf2, 0x40,
	0x18, 0x6f, 0xdf, 0xbc, 0x1a, 0xac, 0x83, 0x49, 0x43, 0x22, 0x10, 0x53, 0x90, 0x89, 0x98, 0xd0,
	0x0b, 0x38, 0xc9, 0x26, 0x8e, 0x0e, 0x2a, 0xa3, 0x0b, 0xb9, 0xb6, 0x0f, 0xf5, 0x92, 0xf6, 0x9e,
	0xd2, 0xe7, 0x4a, 0xe4, 0x1b, 0x38, 0xfa, 0x11, 0xf8, 0x38, 0x8c, 0x8c, 0x4e, 0xc6, 0xc0, 0xe2,
	0xc7, 0x30, 0xf4, 0x0a, 0x1a, 0x23, 0x6c, 0xf7, 0xeb, 0xef, 0x6f, 0xef, 0xac, 0xab, 0x00, 0x28,
	0x46, 0x62, 0x49, 0x8a, 0x23, 0x11, 0x01, 0xb1, 0x49, 0xc7, 0x03, 0xc5, 0x3b, 0x6c, 0x9c, 0x41,
	0x3a, 0x1d, 0x26, 0x90, 0xc6, 0x82, 0x48, 0xa0, 0x84, 0x60, 0xe8, 0xa3, 0x54, 0x29, 0xf7, 0x95,
	0x9b, 0xa4, 0xa8, 0xd0, 0x3e, 0xd5, 0x56, 0x77, 0x63, 0x75, 0x0b, 0x6b, 0xad, 0x1c, 0x62, 0x88,
	0xb9, 0x86, 0xad, 0x4f, 0x5a, 0x5e, 0x3b, 0x0b, 0x11, 0xc3, 0x08, 0x18, 0x4f, 0x04, 0xe3, 0x52,
	0xa2, 0xe2, 0x4a, 0xa0, 0xa4, 0x82, 0xad, 0x16, 0x6c, 0x8e, 0xbc, 0x6c, 0xc4, 0xb8, 0x9c, 0x16,
	0x54, 0x6f, 0xd7, 0xc4, 0x18, 0x03, 0x88, 0x68, 0xdf, 0xc6, 0x5a, 0xd5, 0xc7, 0xb5, 0x77, 0xa8,
	0xd7, 0x68, 0x50, 0x50, 0x17, 0x1a, 0x31, 0x8f, 0x13, 0xe8, 0xbf, 0xdd, 0x06, 0x27, 0x3c, 0x14,
	0x32, 0x9f, 0xa7, 0xb5, 0xcd, 0xc8, 0x6a, 0x3c, 0xac, 0x15, 0xf7, 0x3f, 0xaa, 0x6e, 0x8a, 0xa6,
	0x01, 0x8c, 0x33, 0x20, 0x65, 0x97, 0xad, 0x03, 0x1e, 0xc4, 0x42, 0x56, 0xcc, 0x86, 0xd9, 0x3a,
	0x1a, 0x68, 0x60, 0xb7, 0xac, 0x93, 0xcd, 0xa4, 0xeb, 0x20, 0x48, 0x81, 0xa8, 0xf2, 0x2f, 0xe7,
	0x7f, 0x7f, 0xee, 0x95, 0x5e, 0x66, 0x75, 0xe3, 0x73, 0x56, 0x37, 0x9a, 0xca, 0x3a, 0xdf, 0xd3,
	0x46, 0x09, 0x4a, 0x02, 0xfb, 0xce, 0x2a, 0x6d, 0x12, 0xf2, 0xc6, 0xe3, 0x6e, 0xdb, 0xdd, 0xf1,
	0x20, 0xee, 0x5f, 0x41, 0xfd, 0xff, 0xf3, 0xf7, 0xba, 0x31, 0xd8, 0x86, 0xf4, 0x6f, 0xe7, 0x4b,
	0xc7, 0x5c, 0x2c, 0x1d, 0xf3, 0x63, 0xe9, 0x98, 0xaf, 0x2b, 0xc7, 0x58, 0xac, 0x1c, 0xe3, 0x6d,
	0xe5, 0x18, 0x8f, 0x9d, 0x50, 0xa8, 0xa7, 0xcc, 0x73, 0x7d, 0x8c, 0x99, 0xae, 0x68, 0x47, 0xdc,
	0xa3, 0xe2, 0xcc, 0x26, 0x5d, 0xf6, 0xfc, 0xfd, 0x38, 0x6a, 0x9a, 0x00, 0x79, 0x87, 0xf9, 0xbd,
	0x5d, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xda, 0x76, 0x4b, 0xdd, 0x5f, 0x02, 0x00, 0x00,
}

func (m *QueryPermissionedContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPermissionedContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPermissionedContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQueryPermissionedContract(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintQueryPermissionedContract(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPermissionedContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPermissionedContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPermissionedContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQueryPermissionedContract(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQueryPermissionedContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryPermissionedContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPermissionedContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovQueryPermissionedContract(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQueryPermissionedContract(uint64(l))
	}
	return n
}

func (m *QueryPermissionedContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Contract.Size()
	n += 1 + l + sovQueryPermissionedContract(uint64(l))
	return n
}

func sovQueryPermissionedContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryPermissionedContract(x uint64) (n int) {
	return sovQueryPermissionedContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPermissionedContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPermissionedContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPermissionedContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPermissionedContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPermissionedContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPermissionedContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPermissionedContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPermissionedContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryPermissionedContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPermissionedContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPermissionedContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryPermissionedContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryPermissionedContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryPermissionedContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryPermissionedContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryPermissionedContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryPermissionedContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryPermissionedContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryPermissionedContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryPermissionedContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryPermissionedContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryPermissionedContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryPermissionedContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryPermissionedContract = fmt.Errorf("proto: unexpected end of group")
)
